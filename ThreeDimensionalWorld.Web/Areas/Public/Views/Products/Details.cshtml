@using ThreeDimensionalWorld.Models
@using ThreeDimensionalWorld.Utility
@using ThreeDimensionalWorld.Web.RolesAndUsersConfiguration
@model ShoppingCartItem

@{
    ViewData["Title"] = "Products";
    List<Material> materials = (List<Material>)ViewData["Materials"]!;
    Product product = (Product)ViewData["ModelProduct"]!;
}

<div class="text-center">
    <h1>@product!.Title</h1>
</div>


<div class="row justify-content-center align-items-center">
    <div class="col-md-6">
        <div class="slideshow" style="width: 100%; aspect-ratio: 2/1; ">
            <!-- Slideshow container -->
            <div class="slideshow-container">
                @if (product != null && product.Files != null)
                {
                    foreach (ProductFile item in product.Files)
                    {
                        if (AllowedFormats.Allowed3dFormats.Contains(System.IO.Path.GetExtension(item.Name).ToLower()))
                        {
                            <div class="slideshow-slides fade-slideshow">
                                <div class="stl-container" data-3d-src="/3dModels/@item.Name" data-3d-color="@ViewData["DefaultColor"]" style="width: 100%"></div>
                            </div>
                        }
                        else if (AllowedFormats.AllowedImageFormats.Contains(System.IO.Path.GetExtension(item.Name).ToLower()))
                        {
                            <div class="slideshow-slides fade-slideshow">
                                <img src="~/images/@item.Name" style="width:100%">
                            </div>
                        }
                    }
                }
                <!-- Next and previous buttons -->
                <a class="slideshow-btn-prev">&#10094;</a>
                <a class="slideshow-btn-next">&#10095;</a>
            </div>
            <br>

            <!-- The dots/circles -->
            <div class="slideshow-dots-container" style="text-align:center">
                @if (product != null && product.Files != null)
                {
                    foreach (ProductFile item in product.Files)
                    {
                        if (AllowedFormats.AllAllowedFormats.Contains(System.IO.Path.GetExtension(item.Name).ToLower()))
                        {
                            <span class="slideshow-dot"></span>
                        }
                    }
                }
            </div>
        </div>
    </div>
</div>

<p style="text-align: justify">@product!.Description</p>
@if(product.AttributionLink != null)
{
    <a target="_blank" href="@product.AttributionLink">Източник</a>
}

@if (!User.IsInRole(AppRolesAndUsersConfiguration.AdminRole))
{
    <form asp-area="Customer" asp-controller="ShoppingCarts" asp-action="AddToCart" method="post">
        <input asp-for="ProductId" hidden value="@product.Id" id="product-id-input" />
        <div class="form-group">
            <label asp-for="MaterialId" class="control-label">Материал</label>
            <select asp-for="MaterialId" class="form-control">
                @foreach (Material material in materials)
                {
                    <option class="form-control" value="@material.Id">@material.Name</option>
                }
            </select>
        </div>
        <div class="form-group" >
            <label asp-for="ColorId" class="control-label">Цвят</label>
            <div id="color-container">
                @foreach (Material material in materials)
                {
                    <select asp-for="ColorId" class="form-control" data-material-id="@material.Id" data-colors= hidden>
                        @foreach (MaterialColor color in material.Colors)
                        {
                            <option value="@color.Id" data-color-code="@color.ColorCode">@color.Name</option>
                        }
                    </select>
                }
            </div>
        </div>
        <div class="form-group">
            <label asp-for="Quantity" class="control-label">Брой</label>
            <input asp-for="Quantity" min="1" class="form-control" type="number" value="1" id="quantity-input" />
        </div>

        <p id="product-price">@ViewData["DefaultPrice"]</p>

        @if(User.IsInRole(AppRolesAndUsersConfiguration.CustomerRole))
        {
            <input type="submit" class="btn btn-success" id="submit" value="Добави в Количка" />
        }
        else
        {
            <a class="btn btn-success" asp-area="Identity" asp-page="/Account/Login">Влез</a>
        }
    </form>
}

@section Scripts {
    <script src="~/js/stlDisplay.js"></script>
    <script src="~/js/slideshows.js"></script>
    
    @if(!User.IsInRole(AppRolesAndUsersConfiguration.AdminRole))
    {
        <script>
        document.addEventListener("DOMContentLoaded", function () {
            const materialSelect = document.querySelector('select.form-control');
            const materialOptions = document.querySelectorAll('select[data-material-id]');
           
            const colorContainer = document.querySelector("#color-container");
            const quantityInput = document.querySelector("#quantity-input");
            const productIdInput = document.querySelector("#product-id-input");
            const priceContainer = document.querySelector("#product-price")
           
            let typingTimersQuantityAndMaterials = {};

            quantityInput.addEventListener("input", () => {
                clearTimeout(typingTimersQuantityAndMaterials[quantityInput]);
                typingTimersQuantityAndMaterials[quantityInput] = setTimeout(() => GetNewPrice(), 2000);
            })

            function handleMaterialChange() {
                const selectedMaterialId = materialSelect.value;
                colorContainer.replaceChildren();
                clearTimeout(typingTimersQuantityAndMaterials[quantityInput]);
                GetNewPrice();
                materialOptions.forEach(function (select) {
                    if (select.dataset.materialId === selectedMaterialId) {
                        select.removeAttribute('hidden');
                        colorContainer.appendChild(select);
                        
                        const selectedOption = select.options[select.selectedIndex];
                        UpdateColor(selectedOption.getAttribute("data-color-code"));
                    } else {
                        select.setAttribute('hidden', 'hidden');
                    }
                });
            }

            function GetNewPrice() {
                const dataToBeSent = {
                    ProductId: productIdInput.value,
                    MaterialId: materialSelect.value,
                    Quantity: quantityInput.value
                }

                materialSelect.value;
                quantityInput.value;
                $.ajax({
                    url: "/api/Products/GetProductPrice",
                    contentType: "application/json",
                    type: "POST",
                    data: JSON.stringify(dataToBeSent),
                    success: function (data) {
                        priceContainer.textContent = data.price
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.error("Error:", textStatus, errorThrown);
                    }
                });
            }

            materialOptions.forEach(item => {
                item.addEventListener("change", () => {
                    var selectedIndex = item.selectedIndex;
                    var selectedOption = item.options[selectedIndex];
                    UpdateColor(selectedOption.getAttribute("data-color-code"));
                })
            })

            materialSelect.addEventListener('change', handleMaterialChange);

            handleMaterialChange();

        });
    </script>
    }
}
